function t(t,e,n,o){Object.defineProperty(t,e,{get:n,set:o,enumerable:!0,configurable:!0})}var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},n={},o={},s=e.parcelRequireeb0a;null==s&&((s=function(t){if(t in n)return n[t].exports;if(t in o){var e=o[t];delete o[t];var s={id:t,exports:{}};return n[t]=s,e.call(s.exports,s,s.exports),s.exports}var i=new Error("Cannot find module '"+t+"'");throw i.code="MODULE_NOT_FOUND",i}).register=function(t,e){o[t]=e},e.parcelRequireeb0a=s),s.register("6bnRN",(function(e,n){function o(t){return localStorage.getItem(t)}function s(t,e){localStorage.setItem(t,e)}function i(){localStorage.removeItem("TaskList"),localStorage.removeItem("Started"),localStorage.removeItem("TotalPomos"),localStorage.removeItem("Timer")}t(e.exports,"get",(function(){return o})),t(e.exports,"set",(function(){return s})),t(e.exports,"removeAll",(function(){return i}))})),s.register("kor14",(function(e,n){t(e.exports,"default",(function(){return s}));class o{static show(){document.querySelector("#notification").style.display="flex"}static hide(){document.querySelector("#notification").style.display="none"}static prompt(t,e){let{title:n,subtitle:s,leftButton:i,rightButton:a}=t;return document.querySelector("#notification-title").textContent=n||"",document.querySelector("#notification-subtitle").textContent=s||"",document.querySelector("#notif-left").textContent=i||"",document.querySelector("#notif-right").textContent=a||"",o.show(),new Promise((t=>{document.querySelector("#notification").onclick=n=>{n.target.querySelector("#notif-content")&&e&&(o.hide(),t("neither"))},document.querySelector("#notif-left").onclick=()=>{t("left")},document.querySelector("#notif-right").onclick=()=>{t("right")}}))}}var s=o}));var i=s("6bnRN"),a=s("kor14");class l extends HTMLElement{open(){this.DOM_ELEMENTS.infoModal.style.display="block"}close(){this.DOM_ELEMENTS.infoModal.style.display="none"}constructor(){super(),this.innerHTML='\n    <div id="info-modal">\n      <div id="info-box">\n        <i id="info-close" class="float-end fas fa-times text-danger"></i>\n        <div class="col m-4">\n          <div class="mb-4">\n            <div class="card">\n              <div class="card-body">\n                <h2 class="card-title">Plan</h2>\n                <p class="card-text">\n                  Create a list of tasks that you would like to complete this session!\n                  <ol>\n                    <li>First enter your name above to enter the Task List editor.</li>\n                    <li>Each task asks for a name, and the estimated Pomodoros that will be needed (1-5).</li>\n                    <ul>\n                      <li><b>Don\'t know what a Pomodoro is?</b> A Pomodoro is an aspect of the Pomodoro\n                        Technique. The technique pushes the user to work on tasks in 25 minute chunks\n                        (Pomodoro) with breaks between, and long breaks after 4 Pomodoros. </li>\n                    </ul>\n                      <li>Once you\'ve finished making your tasks, start your session!</li>\n                  </ol>\n                  <p><b>Returning user?</b> The prompt above will allow you to resume a previous session or create\n                      a new one.<br></p>\n                </p>\n              </div>\n            </div>\n          </div>\n          <div class="mb-4">\n            <div class="card">\n              <div class="card-body">\n                <h2 class="card-title">Track</h2>\n                <p class="card-text">\n                  Keep track of your current and upcoming tasks with your TODO List!\n                <ul>\n                  <li>Your current task will be displayed at the top of the timer at all times.</li>\n                  <li>During breaks, you\'ll be able to checkoff the current task, and your next task will be\n                    displayed.</li>\n                  <li>At the bottom of the screen you\'ll be able to check your TODO List, and completed tasks.\n                  </li>\n                </ul>\n                <b>Not sure if you\'re on a task or a break?</b>\n                <ul>\n                  <li>A Green Tomato in the background means you\'re working on a task.</li>\n                  <li>A Red Tomato in the background means you\'re on a break.</li>\n                </ul>\n                </p>\n              </div>\n            </div>\n          </div>\n          <div class="mb-4">\n            <div class="card">\n              <div class="card-body">\n                <h2 class="card-title">Record</h2>\n                <p class="card-text">\n                  Compare the Expected to Actual Pomodoros at the end of your session!\n                  <ul>\n                    <li>At the end of your last task\'s break, you\'ll be prompted to either return to the home\n                      page, or view you session\'s stats.</li>\n                    <li>This page will help you see how long your tasks took compared to how long you expected.\n                    </li>\n                    <li>With this information, you can better time yourself and productivity next session!</li>\n                  </ul>\n                  <b>Did a task take much longer than expected?</b>\n                  <ul>\n                    <li>The Pomodoro Technique recommends splitting tasks into smaller, digestible chunks.</li>\n                    <li>By design, we only allow up to 5 Pomodoros per task, to assist in breaking up tasks into\n                      easier to complete chunks.</li>\n                  </ul>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>',this.DOM_ELEMENTS={infoModal:document.getElementById("info-modal"),infoCloseButton:document.getElementById("info-close")},this.DOM_ELEMENTS.infoModal.style.display="none",this.DOM_ELEMENTS.infoCloseButton.addEventListener("click",(()=>{this.close()}))}}customElements.define("info-modal",l);var r=l;i=s("6bnRN");class d extends HTMLElement{revertToDefault(){this.DOM_ELEMENTS.pomDurationDrop.value=25,this.DOM_ELEMENTS.shortBreakDrop.value=5,this.DOM_ELEMENTS.longBreakDrop.value=25}static setDefaultValuesInStorage(){i.set("workSessionDuration",25),i.set("shortBreakDuration",5),i.set("longBreakDuration",25)}loadStoredInputValues(){this.DOM_ELEMENTS.pomDurationDrop.value=i.get("workSessionDuration"),this.DOM_ELEMENTS.shortBreakDrop.value=i.get("shortBreakDuration"),this.DOM_ELEMENTS.longBreakDrop.value=i.get("longBreakDuration")}saveSettings(){i.set("workSessionDuration",this.DOM_ELEMENTS.pomDurationDrop.value),i.set("shortBreakDuration",this.DOM_ELEMENTS.shortBreakDrop.value),i.set("longBreakDuration",this.DOM_ELEMENTS.longBreakDrop.value),this.close()}open(){this.loadStoredInputValues(),this.DOM_ELEMENTS.settingsModal.style.display="block"}close(){this.DOM_ELEMENTS.settingsModal.style.display="none"}constructor(){super(),this.innerHTML='\n    <div id="settings-modal">\n      <div id="settings-box">\n        <h2 id="settings-text">Settings</h2>\n        <form id="settings-container">\n          <label class="settings-row" for="pomo-duration-select" style="word-wrap:break-word">\n            Pomodoro Duration\n            <select class="settings-select" name="pomo-duration-select" id="pomo-duration-select">\n              <option value="20">20 min</option>\n              <option value="25">25 min</option>\n              <option value="30">30 min</option>\n              <option value="35">35 min</option>\n              <option value="40">40 min</option>\n              <option value="45">45 min</option>\n            </select>\n          </label>\n          <label class="settings-row" for="short-duration-select" style="word-wrap:break-word">\n              Short Break Duration\n              <select class="settings-select" name="short-duration-select" id="short-duration-select">\n                <option value="3">3 min</option>\n                <option value="5">5 min</option>\n                <option value="7">7 min</option>\n                <option value="10">10 min</option>\n              </select>\n          </label>\n          <label class="settings-row" for="long-duration-select" style="word-wrap:break-word">\n            Long Break Duration\n            <select class="settings-select" name="long-duration-select" id="long-duration-select">\n              <option value="15">15 min</option>\n              <option value="20">20 min</option>\n              <option value="25">25 min</option>\n              <option value="30">30 min</option>\n              <option value="35">35 min</option>\n              <option value="40">40 min</option>\n              <option value="45">45 min</option>\n            </select>\n          </label>\n        </form>\n        <button id="settings-default" type="button" class="btn btn-primary btn-block">Revert to recommended settings</button>\n        <div id="settings-buttons">\n          <div class="row">\n            <div class="col">\n              <button id="settings-close" type="button" class="btn btn-block">Cancel</button>\n            </div>\n            <div class="col">\n              <button id="settings-save" type="button" class="btn btn-success btn-block">Save</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>',this.DOM_ELEMENTS={settingsModal:document.getElementById("settings-modal"),pomDurationDrop:document.getElementById("pomo-duration-select"),shortBreakDrop:document.getElementById("short-duration-select"),longBreakDrop:document.getElementById("long-duration-select"),settingsCloseButton:document.getElementById("settings-close"),settingsSaveButton:document.getElementById("settings-save"),settingsDefaultButton:document.getElementById("settings-default")},this.DOM_ELEMENTS.settingsModal.style.display="none",i.get("workSessionDuration")||d.setDefaultValuesInStorage(),this.DOM_ELEMENTS.settingsCloseButton.addEventListener("click",(()=>{this.close()})),this.DOM_ELEMENTS.settingsSaveButton.addEventListener("click",(()=>{this.saveSettings()})),this.DOM_ELEMENTS.settingsDefaultButton.addEventListener("click",(()=>{this.revertToDefault()}))}}customElements.define("settings-modal",d);var c=d;class u extends HTMLElement{createIcons(){this.createInfoButton(),this.createSettingsButton(),this.createStatsButton(),this.createHomeButton()}defaultMode(){this.DOM_ELEMENTS["info-button"].classList.remove("invisible"),this.DOM_ELEMENTS["settings-button"].classList.remove("invisible"),this.DOM_ELEMENTS["stats-button"].classList.remove("invisible")}focusMode(){this.DOM_ELEMENTS["info-button"].classList.add("invisible"),this.DOM_ELEMENTS["settings-button"].classList.add("invisible"),this.DOM_ELEMENTS["stats-button"].classList.add("invisible")}createInfoButton(){const t=document.createElement("i");t.classList.add("fas","fa-info-circle","text-white","m-4"),t.addEventListener("click",(()=>{this.infoModal.open()})),this.DOM_ELEMENTS["info-button"]=t,this.appendChild(t)}createSettingsButton(){const t=document.createElement("i");t.classList.add("fas","fa-wrench","text-white","m-4"),t.addEventListener("click",(()=>{this.settingsModal.open()})),this.DOM_ELEMENTS["settings-button"]=t,this.appendChild(t)}createStatsButton(){const t=document.createElement("a");t.classList.add("fas","fa-chart-bar","text-white","m-4"),t.href="./done.html",this.DOM_ELEMENTS["stats-button"]=t,this.appendChild(t)}createHomeButton(){const t=document.createElement("i"),e={title:"Leave this session and return to home page?",leftButton:"Yes",rightButton:"No"};t.classList.add("fas","fa-home","text-white","m-4"),t.addEventListener("click",(()=>{document.URL.includes("app.html")&&a.default.prompt(e,!1).then((t=>{"left"===t?window.location.href="./index.html":a.default.hide()}))})),this.DOM_ELEMENTS["home-button"]=t,this.appendChild(t)}constructor(){super(),this.DOM_ELEMENTS={menuContainer:document.getElementById("menu-container")},this.infoModal=new r,this.settingsModal=new c;i.get("Username")&&this.createIcons()}}customElements.define("menu-icons",u);